name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  actions: write  # Added for workflow cancellation
  deployments: write  # Added for deployment management

# Allow only one concurrent deployment, cancelling in-progress runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    environment:
      name: github-pages
      url: "https://mkdevelopment1312.github.io/pwa-hotel/"
    runs-on: ubuntu-latest
    
    steps:
    - name: Cancel Previous Deployments
      uses: styfle/cancel-workflow-action@0.12.1
      with:
        workflow_id: ${{ github.workflow }}
        access_token: ${{ github.token }}
        
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build
      run: npm run build
      
    - name: Verify build
      run: npm run verify
      
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './dist'
        
    - name: Cancel pending deployments
      run: |
        echo "üîç Checking for pending GitHub Pages deployments..."
        
        # Install jq if not available
        sudo apt-get update && sudo apt-get install -y jq
        
        # Get all deployments (not just pending ones)
        echo "üìã Fetching all deployments..."
        DEPLOYMENTS=$(curl -s -H "Accept: application/vnd.github+json" \
                           -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                           "https://api.github.com/repos/${{ github.repository }}/pages/deployments")
        
        echo "üîç Found deployments:"
        echo "$DEPLOYMENTS" | jq -r '.[] | "\(.id): \(.status)"' || echo "No deployments found"
        
        # Get pending and in_progress deployments
        PENDING_IDS=$(echo "$DEPLOYMENTS" | jq -r '.[] | select(.status == "pending" or .status == "in_progress") | .id' 2>/dev/null || echo "")
        
        # Cancel each pending deployment
        if [ ! -z "$PENDING_IDS" ]; then
            echo "üõë Found deployments to cancel:"
            for deployment_id in $PENDING_IDS; do
                if [ ! -z "$deployment_id" ] && [ "$deployment_id" != "null" ]; then
                    echo "üõë Cancelling deployment $deployment_id..."
                    CANCEL_RESPONSE=$(curl -s -w "HTTP_STATUS:%{http_code}" \
                         -X POST \
                         -H "Accept: application/vnd.github+json" \
                         -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                         "https://api.github.com/repos/${{ github.repository }}/pages/deployments/$deployment_id/cancel")
                    HTTP_STATUS=$(echo $CANCEL_RESPONSE | tr -d '\n' | sed -e 's/.*HTTP_STATUS://')
                    if [ "$HTTP_STATUS" -eq 200 ] || [ "$HTTP_STATUS" -eq 202 ]; then
                        echo "‚úÖ Successfully cancelled deployment $deployment_id"
                    else
                        echo "‚ö†Ô∏è Failed to cancel deployment $deployment_id (HTTP $HTTP_STATUS)"
                    fi
                fi
            done
            
            echo "‚è≥ Waiting 45 seconds for cancellations to process..."
            sleep 45
            
            # Verify cancellations
            echo "üîç Verifying cancellations..."
            REMAINING=$(curl -s -H "Accept: application/vnd.github+json" \
                             -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                             "https://api.github.com/repos/${{ github.repository }}/pages/deployments" | \
                        jq -r '.[] | select(.status == "pending" or .status == "in_progress") | .id' 2>/dev/null || echo "")
            
            if [ ! -z "$REMAINING" ]; then
                echo "‚ö†Ô∏è Some deployments are still pending/in-progress:"
                for id in $REMAINING; do
                    echo "  - $id"
                done
                echo "‚è≥ Waiting additional 30 seconds..."
                sleep 30
            else
                echo "‚úÖ All deployments cancelled successfully"
            fi
        else
            echo "‚úÖ No pending deployments found"
        fi
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      with:
        timeout: 600000  # 10 minutes (maximum allowed)
        error_count: 30  # More retries
        reporting_interval: 10000
      continue-on-error: true
      
    - name: Retry deployment if failed
      if: steps.deployment.outcome == 'failure'
      run: |
        echo "üîÑ First deployment attempt failed, waiting and retrying..."
        echo "‚è≥ Waiting 60 seconds before retry..."
        sleep 60
        
        # Cancel any remaining deployments before retry
        echo "üîç Checking for any remaining deployments before retry..."
        REMAINING=$(curl -s -H "Accept: application/vnd.github+json" \
                         -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                         "https://api.github.com/repos/${{ github.repository }}/pages/deployments" | \
                    jq -r '.[] | select(.status == "pending" or .status == "in_progress") | .id' 2>/dev/null || echo "")
        
        for deployment_id in $REMAINING; do
            if [ ! -z "$deployment_id" ] && [ "$deployment_id" != "null" ]; then
                echo "üõë Cancelling remaining deployment $deployment_id..."
                curl -s -X POST \
                     -H "Accept: application/vnd.github+json" \
                     -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                     "https://api.github.com/repos/${{ github.repository }}/pages/deployments/$deployment_id/cancel"
            fi
        done
        
        echo "‚è≥ Waiting 30 seconds after cleanup..."
        sleep 30
        
    - name: Deploy to GitHub Pages (Retry)
      if: steps.deployment.outcome == 'failure'
      id: deployment-retry
      uses: actions/deploy-pages@v4
      with:
        timeout: 600000  # 10 minutes
        error_count: 20
        reporting_interval: 15000
